/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AOI = ee.FeatureCollection("users/pedroamoni/AOI");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var geometry = AOI

// Create image collection of S-2 imagery for the perdiod 2016-2018
var S2 = ee.ImageCollection('COPERNICUS/S2')

//filter start and end date
.filterDate('2020-01-01', '2020-01-30')

//filter according to drawn boundary
.filterBounds(geometry);

// Function to mask cloud from built-in quality band
// information on cloud
var maskcloud1 = function(image) {
var QA60 = image.select(['QA60']);
return image.updateMask(QA60.lt(1));
};

// Function to calculate and add an NDVI band
var addNDVI = function(image) {
return image.addBands(image.normalizedDifference(['B8', 'B4']));
};

// Add NDVI band to image collection
var S2 = S2.map(addNDVI);
// Extract NDVI band and create NDVI median composite image
var NDVI = S2.select(['nd']);
var NDVImed = NDVI.median(); //I just changed the name of this variable ;)

// Create palettes for display of NDVI
var ndvi_pal = ['#640000', '#ff0000', '#ffff00', '#00c800', '#006400'];

// Create a time series chart.
var plotNDVI = ui.Chart.image.seriesByRegion(S2, geometry,ee.Reducer.mean(),
'nd',500,'system:time_start', 'system:index')
              .setChartType('LineChart').setOptions({
                title: 'NDVI short-term time series',
                hAxis: {title: 'Date'},
                vAxis: {title: 'NDVI'}
});

// Display.
print(plotNDVI);

// Display NDVI results on map
Map.addLayer(NDVImed.clip(geometry), {min:-0.5, max:1.5, palette: ndvi_pal}, 'NDVI');



//Display RGB results on map
var collection = ee.ImageCollection('COPERNICUS/S2') // searches all sentinel 2 imagery pixels...
  .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 10)) // ...filters on the metadata for pixels less than 10% cloud
  .filterDate('2020-01-01' ,'2020-01-30') //... chooses only pixels between the dates you define here
  .filterBounds(AOI) // ... that are within your aoi
  
print(collection) // this generates a JSON list of the images (and their metadata) which the filters found in the right-hand window.
  
/// so far this is finding all the images in the collection which meets the critera- the latest on top. To get a nice blended-looking mosaic, 
// try some of the tools for 'reducing' these to one pixel (or bands of pixels in a layer stack). 

var medianpixels = collection.median() // This finds the median value of all the pixels which meet the criteria. 

var medianpixelsclipped = medianpixels.clip(AOI).divide(10000) // this cuts up the result so that it fits neatly into your aoi
                                                                  // and divides so that values between 0 and 1      


// Now visualise the mosaic as a natural colour image. 
Map.addLayer(medianpixelsclipped, {bands: ['B12', 'B11', 'B4'], min: 0, max: 1, gamma: 1.9}, 'Sentinel_2 mosaic')


